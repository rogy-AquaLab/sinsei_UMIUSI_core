name: Main CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"

env:
  PACKAGE_NAME: sinsei_umiusi_core # default value, can be overridden by `.env` file
  ROS_DISTRO: jazzy # default value, can be overridden by `.env` file

jobs:
  parse-env-file:
    name: Parse Environment
    runs-on: ubuntu-latest
    outputs:
      file-hash: ${{ steps.hash-files.outputs.hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse environment file
        id: parse-env-file
        shell: bash
        run: source .github/workflows/scripts/parse-env-file.sh $GITHUB_ENV || exit 0

      - name: Hash files for cache key
        id: hash-files
        run: echo "hash=${{ hashFiles('**/*.cpp', '**/*.hpp', '**/*.py') }}" >> "$GITHUB_OUTPUT"

  python-lint:
    name: Python Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3

      - name: Ruff Check
        run: ruff check

      - name: Ruff Format
        run: ruff format --check --diff

  colcon-build:
    name: Colcon Build
    needs: parse-env-file
    runs-on: ubuntu-latest
    container:
      image: rostooling/setup-ros-docker:ubuntu-noble-ros-jazzy-desktop-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch cache
        uses: actions/cache@v4
        env:
          prefix: ${{ runner.os }}-sccache-ros-${{ env.ROS_DISTRO }}-build
        with:
          path: /github/home/.cache/sccache
          key: ${{ env.prefix }}-${{ needs.parse-env-file.outputs.file-hash }}
          restore-keys: ${{ env.prefix }}-

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
        with:
          version: "v0.7.7" # sccache version as apt package

      - name: Colcon Build
        uses: ros-tooling/action-ros-ci@v0.4
        with:
          package-name: ${{ env.PACKAGE_NAME }}
          target-ros2-distro: ${{ env.ROS_DISTRO }}
          vcs-repo-file-url: ${{ github.event.repository.name }}/deps.repos
          rosdep-check: true
          skip-tests: true

      - name: Upload ROS C++ libraries
        uses: actions/upload-artifact@v4
        with:
          name: ros-cpp-libraries
          path: |
            /opt/ros/${{ env.ROS_DISTRO }}/include
            /opt/ros/${{ env.ROS_DISTRO }}/src

      - name: Upload Build results (`build` directory)
        uses: actions/upload-artifact@v4
        with:
          name: colcon-build-results-build
          path: ros_ws/build

  # TODO: C++のコードが実装されたらコメントを外す
  #   cpp-lint:
  #     name: C++ Lint
  #     needs: [parse-env-file, colcon-build]
  #     runs-on: ubuntu-latest
  #     env:
  #       SED_ARG_1: s|/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/ros_ws/src/[0-9a-z]*/${{ github.event.repository.name }}|${{ github.workspace }}|g
  #       SED_ARG_2: s|/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/ros_ws/build|${{ github.workspace }}/build|g
  #     steps:
  #       - name: Checkout install script
  #         uses: actions/checkout@v4
  #         with:
  #           sparse-checkout: .docker/scripts
  #
  #       - name: Download ROS C++ libraries
  #         uses: actions/download-artifact@v4
  #         with:
  #           name: ros-cpp-libraries
  #           path: /opt/ros/${{ env.ROS_DISTRO }}
  #           merge-multiple: true
  #
  #       - name: Download Colcon Build results (`build` directory)
  #         uses: actions/download-artifact@v4
  #         with:
  #           name: colcon-build-results-build
  #           path: build
  #
  #       - name: Replace ROS working directory with current one
  #         run: |
  #           sed -i '${{ env.SED_ARG_1 }}' build/compile_commands.json ; \
  #           sed -i '${{ env.SED_ARG_2 }}' build/compile_commands.json ; \
  #           echo "Replaced ROS working directory in compile_commands.json" && cat build/compile_commands.json
  #
  #       - name: C++ Lint
  #         id: cpp-lint
  #         uses: cpp-linter/cpp-linter-action@v2
  #         env:
  #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         with:
  #           verbosity: debug
  #           version: 18
  #           style: file
  #           tidy-checks: ""
  #           database: build
  #           ignore: ./.github | ./build
  #           step-summary: true
  #           files-changed-only: false
  #
  #       - name: On failed
  #         if: steps.cpp-lint.outputs.checks-failed > 0
  #         run: echo "C++ lint checks failed ... ${{ steps.cpp-lint.outputs.checks-failed }}" && exit 1

  colcon-test:
    name: Colcon Test
    needs: [parse-env-file]
    runs-on: ubuntu-latest
    container:
      image: rostooling/setup-ros-docker:ubuntu-noble-ros-jazzy-desktop-latest
    steps:
      - name: Checkout install script
        uses: actions/checkout@v4
        with:
          sparse-checkout: .docker/scripts

      - name: Colcon Test
        uses: ros-tooling/action-ros-ci@v0.4
        with:
          package-name: ${{ env.PACKAGE_NAME }}
          target-ros2-distro: ${{ env.ROS_DISTRO }}
          # extra-cmake-args: |
          #   -DCMAKE_CXX_FLAGS='-coverage' \
          #   -DCMAKE_C_FLAGS='-coverage'
          # coverage-result: false

      # - run: colcon lcov-result --build-base ros_ws/build --filter '/usr/*' '/opt/ros/*' --lcov-args --ignore-errors mismatch

      # - name: Codecov
      #   uses: codecov/codecov-action@v5
      #   with:
      #     files: ros_ws/lcov/total_coverage.info
      #     name: Coverage of sinsei_UMIUSI_core
      #     token: ${{ secrets.CODECOV_TOKEN }}
